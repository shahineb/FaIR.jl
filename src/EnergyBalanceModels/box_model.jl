using LinearAlgebra, Random, Distributions

include("load_csv.jl")

struct BoxModel
    Nbox::Int                  # Number of boxes
    C::AbstractVector{<:Real}  # Heat capacity of each box W m‚Åª¬≤ yr K‚Åª¬π
    Œ∫::AbstractVector{<:Real}  # Heat exchange coefficients W m‚Åª¬≤ K‚Åª¬π
    Œµ::Real                    # Deep ocean heat uptake efficacy
    F‚ÇÑ‚Çì::Real                  # Effective RF for 4xCO‚ÇÇ
    œÉŒ∑::Real                   # Stddev of the white noise in the radiative forcing
    œÉŒæ::Real                   # Stddev of the white noise in the temperature
    Œ≥::Real                    # Autocorrelation parameter of stochastic forcing
    seed::Int                  # Random seed for stochastic modelling
    Œît::Real                   # Time step yr
    N‚Çú::Int                    # Number of time steps

    function BoxModel(C::AbstractVector{<:Real},
                      Œ∫::AbstractVector{<:Real},
                      Œµ::Real,
                      F‚ÇÑ‚Çì::Real,
                      œÉŒ∑::Real,
                      œÉŒæ::Real,
                      Œ≥::Real,
                      seed::Int,
                      Œît::Real,
                      N‚Çú::Int)
        Nbox = length(C)
        new(Nbox, C ./ Œît, Œ∫, Œµ, F‚ÇÑ‚Çì, œÉŒ∑, œÉŒæ, Œ≥, seed, Œît, N‚Çú)
    end

    function BoxModel(path::String,
                      seed::Int,
                      Œît::Real,
                      N‚Çú::Int)
        params = load_box_model_params(path)
        Nbox = length(params.C)
        new(Nbox, params.C ./ Œît, params.Œ∫, params.Œµ, params.F‚ÇÑ‚Çì, params.œÉŒ∑, params.œÉŒæ, params.Œ≥, seed, Œît, N‚Çú)
    end
end


function computeA(ebm::BoxModel)
    # Instantiate matrix
    A = zeros(ebm.Nbox + 1, ebm.Nbox + 1)
    Œµ‚Å∫ = ones(ebm.Nbox)
    Œµ‚Å∫[ebm.Nbox - 1] = ebm.Œµ

    # Include stochastic terms
    A‚ÇÅ‚ÇÅ = -ebm.Œ≥
    A‚ÇÇ‚ÇÅ = 1 / ebm.C[1]
    A[1:2, 1] = [A‚ÇÅ‚ÇÅ, A‚ÇÇ‚ÇÅ]

    # First box
    A‚ÇÇ‚ÇÇ = -(ebm.Œ∫[1] + Œµ‚Å∫[1] * ebm.Œ∫[2]) / ebm.C[1]
    A‚ÇÇ‚ÇÉ = Œµ‚Å∫[1] * ebm.Œ∫[2] / ebm.C[1]
    A[2, 2:3] = [A‚ÇÇ‚ÇÇ, A‚ÇÇ‚ÇÉ]

    # Last box
    A‚Çô‚Çô‚Çã‚ÇÅ = ebm.Œ∫[end] / ebm.C[end]
    A‚Çô‚Çô = -A‚Çô‚Çô‚Çã‚ÇÅ
    A[end, end-1:end] = [A‚Çô‚Çô‚Çã‚ÇÅ, A‚Çô‚Çô]

    # Intermediate boxes if Nbox > 2
    for i in 2:ebm.Nbox-1
        A·µ¢·µ¢‚Çã‚ÇÅ = ebm.Œ∫[i] / ebm.C[i]
        A·µ¢·µ¢ = -(ebm.Œ∫[i] + Œµ‚Å∫[i] * ebm.Œ∫[i + 1]) / ebm.C[i]
        A·µ¢·µ¢‚Çä·µ¢ = Œµ‚Å∫[i] * ebm.Œ∫[i + 1] / ebm.C[i]
        A[i + 1, i:i+2] = [A·µ¢·µ¢‚Çã‚ÇÅ, A·µ¢·µ¢, A·µ¢·µ¢‚Çä·µ¢]
    end
    return A
end


function compute_bd(ebm::BoxModel)
    # Compute exp(A)
    A = computeA(ebm)
    e·¥¨ = exp(A)

    # Compute vector forcing update bd = A‚Åª¬π(e·¥¨ - I)b
    b = zeros(ebm.Nbox + 1)
    b[1] = ebm.Œ≥
    bd = A \ ((e·¥¨ - I) * b)
    return bd
end


function samplevariability(ebm::BoxModel)
    A = computeA(ebm)
    N‚Çê = size(A, 1)
    Q = zeros(N‚Çê, N‚Çê)
    Q[1, 1] = ebm.œÉŒ∑^2
    Q[2, 2] = (ebm.œÉŒæ / ebm.C[1])^2
    H = [-A Q ; zeros(N‚Çê, N‚Çê) A']
    e·¥¥ = exp(H)
    Qd = e·¥¥[N‚Çê + 1:end, N‚Çê + 1:end]' * e·¥¥[1:N‚Çê, N‚Çê + 1:end]
    Qd = 0.5 .* (Qd .+ Qd')
    Random.seed!(ebm.seed)
    ùí© = MvNormal(zeros(N‚Çê), Qd)
    wd = rand(ùí©, ebm.N‚Çú)'
    return wd
end


function impulseresponse(ebm::BoxModel)
    # Compute eigendecomposition of A
    A = computeA(ebm)
    Œõ, Œ¶ = eigen(A[2:end, 2:end])

    # Compute timescales d and equilibrium response q (notations from Millar et al. 2017)
    d = -ebm.Œît ./ real(Œõ)
    q = d .* (Œ¶[1, :] .* inv(Œ¶)[:, 1]) ./ (ebm.C[1] * ebm.Œît)
    return d, q
end


function emergentparameters(ebm::BoxModel, ratio‚ÇÇ‚Çì‚ÇÑ‚Çì=0.5)
    d, q = impulseresponse(ebm)
    œÑ‚ÇÇ‚Çì = log(2) / log(1.01)
    ecs = ebm.F‚ÇÑ‚Çì * ratio‚ÇÇ‚Çì‚ÇÑ‚Çì * sum(q)
    tcr = ebm.F‚ÇÑ‚Çì * ratio‚ÇÇ‚Çì‚ÇÑ‚Çì * sum(q .* (1 .- (d ./ œÑ‚ÇÇ‚Çì) .* (1 .- exp.(-œÑ‚ÇÇ‚Çì ./ d))))
    return ecs, tcr
end


function ebm_dynamics(ebm::BoxModel)
    # Compute exp(A)
    A = computeA(ebm)
    e·¥¨ = exp(A)

    # Compute vector forcing update bd = A‚Åª¬π(e·¥¨ - I)b
    b = zeros(ebm.Nbox + 1)
    b[1] = ebm.Œ≥
    bd = A \ ((e·¥¨ - I) * b)

    # Sample internal variability updates
    wd = samplevariability(ebm)
    return e·¥¨, bd, wd
end


function FtoT(T‚Çú‚Çã‚ÇÅ, e·¥¨, bd, wd‚Çú‚Çã‚ÇÅ, RF‚Çú‚Çã‚ÇÅ)
    T‚Çú = e·¥¨ * T‚Çú‚Çã‚ÇÅ .+ bd .* RF‚Çú‚Çã‚ÇÅ .+ wd‚Çú‚Çã‚ÇÅ
    return T‚Çú
end


function run(ebm::BoxModel, RF::AbstractVector{<:Real})
    # Compute exp(A)
    A = computeA(ebm)
    e·¥¨ = exp(A)

    # Compute vector forcing update bd = A‚Åª¬π(e·¥¨ - I)b
    b = zeros(ebm.Nbox + 1)
    b[1] = ebm.Œ≥
    bd = A \ ((e·¥¨ - I) * b)

    # Sample internal variability updates
    wd = samplevariability(ebm)

    # Compute boxes temperatures
    T = zeros(ebm.N‚Çú, ebm.Nbox + 1)
    for i in 2:ebm.N‚Çú
        T[i, :] = e·¥¨ * T[i - 1, :] .+ bd .* RF[i - 1] .+ wd[i - 1, :]
    end

    # Return surface temperature and stochastic forcing time serie
    T‚Çõ = T[:, 2]
    ùìï = T[:, 1]
    return T‚Çõ, ùìï
end